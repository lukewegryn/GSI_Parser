/*
 * Luke Wegryn
 * GSI Parser: Project 1
 * 1/28/2015
 * 
 * Purpose: The main purpose of this program is to parse data from GIS records and then output
 * 			data according to the commands entered. The inputs are the GIS Data file and the Commands file
 * 			and the output is the Result.txt file that lists the commands and the results of those commands.
 * 			The only data structure used in this assignment is an integer list that stores all of the offsets
 * 			corresponding to the first lines of the GIS data file.
 */

// On my honor:
//
// - I have not discussed the Java language code in my program with
// anyone other than my instructor or the teaching assistants
// assigned to this course.
//
// - I have not used Java language code obtained from another student,
// or any other unauthorized source, either modified or unmodified.
//
// - If any Java language code or documentation used in my program
// was obtained from another source, such as a text book or course
// notes, that has been clearly noted with a proper citation in
// the comments of my program.
//
// - I have not designed this program in such a way as to defeat or
// interfere with the normal operation of the Curator System.
//
// Luke Wegryn

import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.List;

/*
 * The purpose of this class is to parse two files from the command line, and depending on the commands in the command file, 
 * generate a result output that provides the results generated by the commands.
 */
public class Project1 {
	/*Inputs: Command Line Arguments (String Array). Output: Void. Purpose: This is the main function.
	 * It takes in two command line arguments, The GSI input file name, and the Commands File name. */
	public static void main(String[] args) {
		parser myParser = new parser(args[0]); //initialize a parser object to read in the GIS data
		long offset = 5178; //intialize the offset
		lineHandler myLineHandler; //initialize a lineHandler object to handle individual lines in the GIS data
		List<Long> offsetList; //this list will contain all of the valid offsets in the file
		if(myParser.isValidFile()){ 
			offsetList = myParser.findOffsets(); //find all of the offsets in the file
			myLineHandler = new lineHandler(myParser.seekLine(offsetList.get(0))); //instantiate a new lineHandler to put in the first line
			lineWriter lw = new lineWriter(); //initialize a line writer that will output all of the information to a Result.txt file
			lw.writeLineToFile(("\t" + offsetList.get(0) + "\t" + myLineHandler.getFid())); //write an initial line
			for(int i = 1; i < offsetList.size(); i++) //write out all of the offsets, and their corresponding FIDs
			{
				myLineHandler.setLineHandler(myParser.seekLine(offsetList.get(i))); //each time this is done it changes the data stored in this object to the current line
				lw.writeLineToFile(("\t" + offsetList.get(i) + "\t" + myLineHandler.getFid())); //output to the file
				
			}
			lw.writeLineToFile("\r\n"); //write a line at the end
			
			long lastOffset = offsetList.get(offsetList.size()-1); // get the last valid offset
			commandParser cp = new commandParser(args[1]); //instantiate the command parser object
			String[] currentCommand = {null, null}; //this String array with hold the current command
			boolean quit = false;
			while(!quit){ //while the current command isn't quit
				currentCommand = cp.parseNext(); //parse the next command
				if(currentCommand[0] == "quit"){ //if it is quit, write "quit" and "Exiting" to the file
					quit = true;
					lw.writeCommandToFile("quit");
					lw.writeResultToFile("Exiting");
				}
				
				else if(currentCommand[0] != null){ //else if there is data in the command
					
					lw.writeCommandToFile(currentCommand[0] + "\t" + currentCommand[1]);  //write the current command to the file
					
					long commandOffset = Integer.parseInt(currentCommand[1]); //store the offset that is associated with the commmand
					if( commandOffset > lastOffset){ //decide what to write to the file based on the command/offset
						lw.writeResultToFile("Offset too large");
					}
					
					else if(commandOffset < 0){
						lw.writeResultToFile("Offset is not positive");
					}
					
					else if(myParser.isBeginningOfLine(commandOffset) != 1){
						lw.writeResultToFile("Unaligned offset");
					}
					
					else if(myParser.isBeginningOfLine(commandOffset) == 1){ //if it is a valid offset, output the correct information to the file
						myLineHandler.setLineHandler(myParser.seekLine(commandOffset));
						lw.writeResultToFile(myLineHandler.commandResult(currentCommand[0]));
					}
				}
			}

			}
			
		
	}
}
